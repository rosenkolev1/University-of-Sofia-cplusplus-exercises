Правено на visual studio, защото с това съм свикнал.

Имплементацията с int исползва масив от int за пазене на цифрите на числото. 
Освен това работи по-малко по-различен начин. Деленето и процента не са направени за нея.

Имплементацията с char я направих, след като прочетох условието и разбрах, че трябва да пазим масив от char.
Съответно зарязах първата имплементация и започнах с char-ове. Повечето неща ги копирах от пъвата имплементация с int,
като само на моменти променях някои неща. Отне изненадващо малко време. Само ~1:30 да направя имплементация с char да
работи с всичко, с което работи и int.

Впоследствие обаче в char имплементацията смених доста работи. Освен това вкарах и деление и %, които бяха отвратителни.
Освен това създадох един нов клас освен BigNumber. Не че не може и без него -> можеше да вкарам bool променлива във 
функцията за делене, която да определя дали да връщам остатъка или частното. Но пък защо не. В последствие трябваше
доста да си поиграя, докато разбера как да избегна circular dependency-то. Защото BigNumber трябва да знае за втория клас.
А втория клас трябва в себе си да пази данни от тип BigNumber, съответно да знае да BigNumber. И малко стана мазало. 
Пробвах с void*, обаче после при кастването и дереферирането стана мазало
Ама се оказа, че има нещо, наречено Forward Declaration. И с него стана.

Освен това ми отне твърде дълго време да разбера как да върна обект от тип BigNumberDivisionResult със указатели към 
локални за функцията обекти. Решението беше просто, да направя обектите в динамичната памет, за да не ги убие компилатора
след края на функцията. Ама то взе че стана memory leak. И на сега как да ги изтрия тези обекти, без да убия важна памет,
която ще ми трябва за по-късно. Еми, тук леко запецнах, но след няколко опита на различни неща ми се получи.

Абе, защо c++ е толкова гнусен. На c# това щеше да стане много по-лесно :(

Feel free to copy my test data btw.